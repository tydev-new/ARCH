This document outlines the requirement for Tardis to checkpoint and restore containers automatically and seamlessly.
Tardis acts as a wrapper between Containerd and Runc. Tardis intercepts the Runc commands from Containerd, processes them, and calls the real Runc with modified commands.
The requirement has the following sections:

1. Runc command processing
2. Container config 
3. Container files
4. Checkpoint handler
5. Internal states

Logging and error handling

1. Runc command processing

Tardis parses the Runc commands that our wrapper captures as input, process them, and then build a modified command to call the real Runc. 

See existing runc.py, runc_handler.py, and update if needed.

1.1 Command parsing

All Runc commands follow this general structure:

runc [global_options] subcommand [subcommand_options] container_id
Tardis needs to extract the subcommand, namespace, container_id, global_options, and subcommand_options from the input args. 

General parsing steps:

- Get global options, extract namespace as last subdirectory in root directory
- Identified subcommand, note subcmd follows global options
- Get subcommand-specific options
- Container ID is extracted from the end of the command

Example 1:
Runc command:
runc --root /run/containerd/runc/default --log /run/containerd/io.containerd.runtime.v2.task/default/tc/log.json --log-format json create --bundle /run/containerd/io.containerd.runtime.v2.task/default/tc --pid-file /run/containerd/io.containerd.runtime.v2.task/default/tc/init.pid tc

Extracted data:
subcommand: create
namespace: default
container_id: tc
global options: --root /run/containerd/runc/default --log /run/containerd/io.containerd.runtime.v2.task/default/tc/log.json --log-format json
subcmd options: --bundle /run/containerd/io.containerd.runtime.v2.task/default/tc --pid-file /run/containerd/io.containerd.runtime.v2.task/default/tc/init.pid

Example 2:
Runc command:
runc --root /run/containerd/runc/default start tc

Extracted data:
subcommand: start
namespace: default
container_id: tc
global options: --root /run/containerd/runc/default
subcmd options: None

See existing runc_handler_parser and update to the requirement.

1.2 Verify container config

Tardis checks whether the containers is Tardis enabled by looking into the container’s config json and see if env variable TARDIS ENABLE is there. See section 2.1.  

If not enabled, Tardis calls real Runc with the unmodified args.

See existing container_handler_config.py and update if needed.

1.3 Subcommand processing

Tardis only processes the following subcommands - "create", "start", "checkpoint", "resume", "delete". For all other subcommands, Tardis calls real Runc with the unmodified args.

Tardis uses the parser extracted info to the subcommand processing. For each subcmd, use namespace and container_id to uniquely identify the container.

1.4 Create subcommand processing

Expand the existing Containerd and Runc behavior to create container, by adding option to restore from a checkpoint image. Restore operation has two parts - copy the container upperdir files and restore the process using Runc.

Start with the following:

Check if container requires a a new bind mount, do so if needed, see Section 2.3.

Verifies whether a checkpoint image exists, use config.json image path info as input, see Section 2.2. 

Validate the checkpoint image by looking into its log file, see Section 4.2.

If verify or validate fails, then Tardis calls real Runc with the unmodified args.

If both verify and validate passes, do the following to restore the container from image.

Restores container uppdir files by copying from image path, see section 3.

Modifies Runc subcommand from create to restore, along with new --image-path and --detach subcmd options, see below

create --bundle <bundle_path> --pid-file <pid_file_path> <container_id>
to 
restore --detach --image-path <image_path> --bundle <bundle_path> --pid-file <pid_file_path> <container_id>

Example:
create --bundle /run/containerd/io.containerd.runtime.v2.task/default/tc --pid-file /run/containerd/io.containerd.runtime.v2.task/default/tc/init.pid tc
change to
restore --detach --image-path /var/lib/tardis/checkpoint/default/tc --bundle /run/containerd/io.containerd.runtime.v2.task/default/tc --pid-file /run/containerd/io.containerd.runtime.v2.task/default/tc/init.pid tc
Call the real Runc with complete command including the intercepted global options, modified subcmd, subcmd, options, and container_id.

if restore successful, sets the internal state for the container with a skip_start flag. See Section 5. Containerd calls Runc with start subcmd after create. Since restore subcomd already starts the container by default, skip calling Runc with start subcomd to avoid conflict.

If the restore fails, do the following:

Roll back change to the container by cleaning up the uppdir files

Call real Runc with the unmodified args, ie. original create subcmd and options

1.5 Start subcommand processing

Checks the skip_start flag, if set, reset the flag, then immediately exit with return code 0.

If skip_start not set, calls real Runc with unmodified args.

1.6 Checkpoint subcommand processing

Expand the existing Containerd and Runc behavior to checkpoint container process, by adding operation to copy the container upperdir files into the checkpoint image.

Do the following:

Retrieve checkpoint image path from container’s config.json

Retrieve container upperdir path

Copy files from container upperdir to checkpoint image, using tar to compress

If there are any failures, call real Runc with the unmodified args.  Otherwise:

Modify the Runc command:

Removing the --work-path, --leave replace subcommand options

Replace --image-path value by the retrieved image path



checkpoint --image-path <xxx> --work-path <yyy> --file-locks --leave-running <container_id>


checkpoint --image-path <image_path> --file-locks <container_id>
Call real Runc with the modified subcmd options

If Runc command successful, sets the internal state for the container with a skip_resume flag.

1.6 Resume subcommand processing

Checks the skip_resume flag, if set, reset the flag, then immediately exit with return code 0.

If skip_start not set, calls real Runc with unmodified args.

1.6 Delete subcommand processing

Clean up the checkpoint image when the container process exits successfully.

Do the following:

Check the container flag for exit, see Section 5

If exit flag exist and exit code is 0:

Delete the checkpoint image path

If bind mount was used, based on container config.json, clean up the bind mount, see Section 2

Remove exit flag

Call the real Runc with unmodified args.

2. Container configuration

Takes namespace and container_id as inputs.

Do the following:

Find the container config.json file

Reads config.json for environment variables and return their value

Modify config.json setting for bind mount and current working directory

Assume the config.json file follows OCI format.

2.1 Find container config.json

First uniquely identify the container using namespace and container_id.

Use the following to find the config.json file location.



    possible_paths = [
        "/run/containerd/io.containerd.runtime.v2.task/<namespace>/<container_id>/config.json",
        "/run/containerd/runc/<namespace>/<container_id>/config.json",
        "/run/runc/<namespace>/<container_id>/config.json"
    ]
Should return and log error if config.json not found.

2.2 Environment variables

Tardis needs to read following env vars from the config.json file:

TARDIS_ENABLE = 1 

TARDIS_CHECKPOINT_HOST_PATH = /your/path/for/checkpoint/images

TARDIS_NETWORKFS_HOST_PATH = /your/path/for/network_fs/mount/on/host

TARDIS_WORKDIR_CONTAINER_PATH = /your/path/for/work_dir/inside/container

TARDIS_ENABLE_MANAGED_EBS = 1 

TARDIS_MANAGED_EBS_SIZE_GB = "your volume size in GB" 

TARDIS_WORKDIR_CONTAINER_PATH = /your/path/for/work_dir/inside/container

By default:

Reading TARDIS_ENABLE and TARDIS_ENABLE_MANAGED_EBS returns 0 if the variable is missing, or does not have a value.

XYX_PATH variables by default returns None.

2.2 Modify settings

Tardis needs to modify following settings and write out the config.json file:

Add bind mount given input of source and destination path

If source path, ie. path inside container, is already bind mount another destination/host path, give error message and do not change config.json file

Add current working directory given input path

If current working directory already set, give warning message and update config.json file

3. Container files

Containerd uses overlay file system where the writeable files are stored in upperdir, while read-only files are stored in lowerdir. 

Tardis needs to copy the upperdir files to checkpoint image during checkpoint, and the reverse during restore.

First uniquely identify the container using namespace and container_id as input, then do following:

Find the container upperdir path

Copy all files from upperdir path to checkpoint image path, using tar compression

Copy all files from checkpoint image path to upperdir path, and expand the tar file

Roll back copy to upperdir path, in case restore failed, and Tardis need to create a new container

3.1 Upperdir path

The upperdir path is dynamic, use the following logic - 



def get_upperdir(self, container_id):
    """
    Runs 'mount' and filters for an overlay mount containing the container id.
    Returns the value of upperdir if found, else None.
    """
    try:
        output = subprocess.check_output(["mount"], text=True)
    except subprocess.CalledProcessError as e:
        self.logger.error("Failed to run mount: %s", e)
        return None
    pattern = re.compile(r"upperdir=([^,\\)]+)")
    for line in output.splitlines():
        if "overlay" in line and container_id in line:
            match = pattern.search(line)
            if match:
                upperdir = match.group(1)
                self.logger.info("Found upperdir for container '%s': %s", container_id, upperdir)
                return upperdir
    self.logger.warning("Could not determine upperdir for container '%s'", container_id)
    return None
Double check how namespace also impacts the upperdir path.

3.2 Copy to container roll back

Roll back only deletes the files copied from checkpoint image to upperdir, not blindly delete all files in the upperdir path.

4. Checkpoint handler

Tardis need to manage metadata for for each container checkpoint, including

Checkpoint image path

Validate checkpoint image

4.1 Checkpoint image path

Build the checkpoint image path, based on namespace, container_id, env variables from the container config.json, and following priority:



if TARDIS_NETWORKFS_HOST_PATH, then image path = $TARDIS_NETWORKFS_HOST_PATH/checkpoint/namespace/container_id
else if TARDIS_CHECKPOINT_HOST_PATH, then image path = $TARDIS_CHECKPOINT_HOST_PATH/namespace/container
else image path = $BASE_CHECKPOINT_PATH/namespace/container_id
4.2 Validate checkpoint image

Need to validate the checkpoint image, based on image path as input. 

Find dump.log in the image path, and verify its last line includes “Dumping finished successfully"

If both condition passes, return true. If either fails, return false.

5. Internal state

Neet to track the containers states relevant to checkpoint and restore.

Since Tardis is called by multiple processes, each state read & write operation needs to be atomic and persistent to file.

The tracked states includes:

skip_start flag - During Containerd’s call to Runc create, if the container is actually restored from checkpoint, Tardis need to skip the next Containerd call to Runc start, as the restored container start automatically.

skip_resume flag - Similar reason for Containerd’s call to Runc Checkpoint, we need to skip the next Runc resume call, as Tardis kills to the container process after checkpoint to maintain consistent states.

Container process exit code

5.1 Container process exit code

Tardis needs to monitor the exit code using following command: 



sudo ctr events
as Containerd and Runc do not provide direct API to capture the process exit code.

Ctr events continuously output container process (task) events in the following format



2025-04-04 19:10:59.898514001 +0000 UTC default /tasks/exit {\"container_id\":\"tc\",\"id\":\"tc\",\"pid\":6615,\"exit_status\":137,\"exited_at\":{\"seconds\":1743793859,\"nanos\":783072930}}
need to parse into 



Namespace: default 
Container_id: tc
Topic: /tasks/exit
Exit code: 137
Note there are:

Events other than /tasks/exit, which are dropped

Exit code (“exit_status”) may not be present, which is taken as exit code 0

Tardis need to set a flag for exit code for the enabled containers after parsing a matching exit event, based on namespace and container_id.

6. Error handling and logging

The execution code should be covered with try… catch blocks as much as possible.

In case of error, retry is not need, instead, follow design behavior and/or fail gracefully, and log the error.

Logs should be:

Consolidated into a single log file

Have multiple levels - INFO, ERROR

For Runc command, log both the intercepted command as well as modified command, as INFO

